# config/services.yaml

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Controller\LoginController:
        autowire: true
        autoconfigure: true
        public: false # Assurez-vous que ce service n'est pas public pour des raisons de sécurité (par défaut)
    App\Controller\MainController:
        autowire: true
        autoconfigure: true
    App\Repository\ClientRepository:
        arguments:
            $registry: '@doctrine'
        tags: ['doctrine.repository_service']
    App\Repository\EmployeRepository:
        arguments:
            $registry: '@doctrine'
        tags: ['doctrine.repository_service']
    App\Controller\DashboardController:
        autowire: true
        autoconfigure: true
        public: false  # Assurez-vous que ce service n'est pas public pour des raisons de sécurité
    App\Controller\ProfilController:
        autowire: true
        autoconfigure: true
        public: true  # Assurez-vous que ce service est public si nécessaire

 # Service pour le TwigEventSubscriber
    App\EventSubscriber\TwigEventSubscriber:
        arguments:
            $twig: '@twig'
            $categorieRepository: '@App\Repository\CategorieRepository'
            $produitRepository: '@App\Repository\ProduitRepository'
            $entityManager: '@doctrine.orm.entity_manager'
        tags:
            - { name: 'kernel.event_subscriber' }



